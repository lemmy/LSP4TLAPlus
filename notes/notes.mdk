Title         : LSP for TLA+
Author        : RiSE
Affiliation   : Microsoft Research
Email         : rise@microsoft.com

Colorizer     : javascript
Bib style     : plainnat
Bibliography  : example
Logo          : True

Doc class     : [10pt]article

[TITLE]

~ Abstract
There is more in you of good than you know, child of the kindly West.
Some courage and some wisdom, blended in measure. If more of us valued
food and cheer and song above hoarded gold, it would be a merrier world!
~

# LSP for RiSE

LSP solves the dilemma that creators of (programming and specification)
languages face when it comes to tooling support for their language. 
Tooling providers (Visual Studio, Eclipse, ...) see no benefit in adding 
support for another (research) language until the language has reached 
maturity and attracted a significant user base. On the other hand, language 
creators usually do not have the bandwidth to add language support to all 
editors and IDEs out there. This limits the languages reach because the success
of a language is also determined by its tooling.

Providing a home-grown solution or focusing on a single IDE is the usual 
approach taken by language creators. LSP is a game changer because it provides
a standardized API that when used will work in all IDEs. This makes LSP especially
attractive for language researchers.

# LSP

* <https://en.wikipedia.org/wiki/Language_Server_Protocol>
* <https://microsoft.github.io/language-server-protocol/>
* <https://langserver.org/>
* [LSP 4 Java](https://github.com/eclipse/lsp4j)

# Green vs. Brown-Field

* Greenfield or brownfield project?
  * Provide a solution for existing (research) languages such as Koka, Lean, TLA+, ...
  * Identify best practices for future research languages how they should build on LSP from the start
    * Follow a architecture such as [LSP fo bash](https://github.com/mads-hartmann/bash-language-server) which
      builds on [tree-sitter](http://tree-sitter.github.io/tree-sitter/); a generic parser framework

# TLA+ or another language?     { #sec-intro }

Most asked-for feature (besides solving state space explosion) is tooling/language support for IDEs and editors
other than Eclipse (TLA+ Toolbox).

## Obstacles

* Untyped, math-based, high-level makes Tooling generally more challenging
  * Impedance mismatch with programming IDEs
* TLA+ and/or PlusCal?
  * PlusCal uses TLA+ expressions
* LSP does not cover functionality available in TLA+ Toolbox for
  * model checking
    * => Embed HTML
    * => Text-based Model
  * proof assistant
    * decompose proof command
      * => Hack refactoring supoprt of LSP
* Current Toolbox and Tools implemented in Java
* Syntax and semantic checker (SANY) command-line only tool
  * Refactoring SANY a hackathon of its own
  * => Duplicate functionality? :-(

## Architecture

* The TLA+ tools and especially the syntax and semantic checker (SANY) are implemented in Java. If the architecture
  of the LSP2CL daemon/process is adopted, spawning a Java process might be too heavyweight to provide a responsive/snappy
  user experience. One way is to run SANY in-process which however conflicts with the idea of having a generic LSP2CL. An
  alternative might be to build SANY as a (static) [native image with GraalVM](https://www.graalvm.org/docs/reference-manual/aot-compilation/).
  GraalVM's native image trades execution for startup speed which is acceptable for the LSP use case. However, for large
  specifications - not the norm - parsing may take to long to be executed for each request coming from LSP2CL. We would have
  to find a way to keep the AST in memory or at least persist it to disk.
  

## Prior Work

* <https://github.com/ahelwer/tlaplus-language-server> (just an empty project)
* <https://github.com/TeamTilapia/vscode-tilapia> (no LSP/pure VSCode extension)

# Organizational

* [Code at GitHub](https://github.com/lemmy/lsp4tlaplus)
* Page at <https://garagehackbox.azurewebsites.net/hackathons/oneweek/2019/main>

----------

07/03/2019

* Discussed what LSP is and what it can be used for
* Came up wit the following goals

# Goals (+) and Non-Goals (-)

* (+) Familiarize with LSP
* (+) Generic LSP to text-based stdin/stdout command-line interface, i.e. an LSP implementation that invokes the (existing) tools such as syntax checker, compiler, ... of the language via their existing command-line interfaces. In other words, the goal is a language-agnostic LSP implementation which can be - with little effort - connected to existing command-line tools.
  * Not bound to TLA+ but tailored to languages that just require a small subset of the features provided by LSP (mainly editing)
  * => Identify subset of functionality we want to support
  * => (-) Optimal performance not one of the main goals 
* (-) Do not build a product

# Action Items

* Daan: Jonathan Brachth√§user LSP for Koka
* Ken: Send GitHub username to Markus to get access to repo
* Leo: Send GitHub username to Markus to get access to repo
* Everybody: Read LSP documentation


---------------

