[INCLUDE=presentation]
Title         : LSP for RiSE?
Sub Title     : ...WISCY
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Content

[TOC]

# Hackathon

## The Grand Challenge of Tooling

~ Begin Framed
|               | Koka | LEAN | F*  | Ivy | TLA+ | ... |
| --------------|:----:|:----:|:---:|:---:|:----:|:----:|
| Emacs         |      |      |     |     |      |
| Vi            |      |      |     |     |      |
| VSCode        |      |      |     |     |      |
| Visual Studio |      |      |     |     |      |
| Eclipse       |      |      |     |     |      |
| ...           |      |      |     |     |      |
~End  Framed

## The Solution

~ Center
![lsp-languages-editors]
~

[lsp-languages-editors]: images/lsp-languages-editors.png "lsp-languages-editors" { width:auto; max-width:90% }


> Language Server Protocol is a win for both language providers and tooling vendors!

~ Center
(LSP proposed by Microsoft)
~

## Architecture (TLA+)

* Existing TLA+ Toolbox acts as the LSP (back-end) server
  * Java/Eclipse there exists [lsp4j](https://github.com/eclipse/lsp4j)
    (abstracts from JSON parsing)

~ Center
![IMG_20190722_150554~2]
~
[IMG_20190722_150554~2]: images/IMG_20190722_150554-2.jpg "IMG_20190722_150554~2" { width:auto; max-width:90% }

## Supported: Code editing

~ Center
![PlusCal]
~
[PlusCal]: images/PlusCal.png "PlusCal" { width:auto; max-width:90% }

## Partially supported: Proofs

~ Center
![TLAPS7]

[TLAPS7]: images/TLAPS7.png "TLAPS7" { width:auto; max-width:90% }
~

## Not supported: Error Traces

~ Center
![MonTraceExplorer]

[MonTraceExplorer]: images/MonTraceExplorer.png "MonTraceExplorer" { width:auto; max-width:90% }
~

## Not supported: Models

~ Center
![ModelEditor]

[ModelEditor]: images/ModelEditor.png "ModelEditor" { width:auto; max-width:90% }
~


## LEAN

* LEAN has a [VSCode extension](https://marketplace.visualstudio.com/items?itemName=jroesch.lean) based on LSP
* Everything besides code editing is hand-written HTML
* ...specific to VSCode
  * LSP __client__ does more than it should
* Took 1.x Phd students months to get going
* ...and they still have to maintain it

## Way out?

* Keep hacking...
  * [Isabelle for VSCode](https://marketplace.visualstudio.com/items?itemName=makarius.isabellehttps://marketplace.visualstudio.com/items?itemName=makarius.isabelle)
  * [Coq for LSP](https://github.com/coq/coq/issues/9012)
* [Debug Adapter Protocol](https://microsoft.github.io/debug-adapter-protocol/overview) 
* LSP 2.0 (ideally convince Erich Gamma to do our work)
* Formal Language Server Platform
  => Identify common denominator of RiSE languages?

# The bigger picture

## TLA+ Toolbox

* Toolbox provides functionality to tap into the compute resources provided by e.g. Azure
  * Run model checking remotely on fat machines
  * Run model checking in parallel on multiple machines
    * => More exhaustively explore design space

# From Rise4fun to *Formal Methods as a Service*

(Peli inspired this idea by mentioning that VSCode will move to the web soon)

## Goals

* Boost popularity of RiSE languages and tools by providing a web-based,
 first-class IDE & Experiment Environment

* Convenience & Easy-Of-Use extremely important to win users
  * [SageMath](http://www.sagemath.org/index.html) (William Stein)
  * [CoCalc](https://cocalc.com/policies/pricing.html)
  * Patrice's project Springfield inspirational

## Target audience 

* Education: 
  Teaching environments such as a university course on distributed systems

* Enterprise:
  * Microsoft internal (dog food)
  * External 
  * => Explore design space as fast as possible (massive compute)

## Use cases

* Education: 
  * No time or expertise to setup a tools on student computers
  * Insufficient resources to check the results of all students as part of grading
      * [CSE586 at University Buffalo](https://cse.buffalo.edu/~demirbas/CSE586.html)
  * _Hello_ [MakeCode](https://www.microsoft.com/en-us/makecode?rtc=1)?!

* Enterprise:
  * Explore design space faster by running tools, i.e. model checker in parallel
  * Time-dimension of prover or model checking runs
  * Continuous integration for model checking, theorem proving, rest of software project

## Convenience

* No installation (just open an URL)
  * web is the future/VSCode is built on chromium
* Package Management
* Lightweight user experience

## Compute

* Scale to massive compute without buying expensive HW
  => No up-front investment
* Build datasets from FMaaS to feed into ML to improve the tools

## Related Services

* [Azure Pipeline](https://azure.microsoft.com/en-us/services/devops/pipelines/)
  * Implement a model checker task
* [Azure Batch](https://azure.microsoft.com/en-us/services/batch/)
* Azure Stack](https://azure.microsoft.com/en-us/overview/azure-stack/)
  * => Reuse local HW

## Manpower

* An Azure service requires at least one FTE
  * Administrative "overhead" such as compliance
  * => Prototype with a 3 months RiSE intern
  * => Tap into Gavin's resources
  * => Seek help from Azure experts to navigate the Azure feature space

# Tuesday

* Hacked a Python script to convert a txt file to csv. :-)
* TLA+ execution statistics analytics with PowerBi

## Wednesday




-------------

# Madoko Presentation

Using [Madoko] it is easy to create beautiful presentations.

* [Html][slide]:
  Uses the `Reveal.js` library by [Hakim El Hattab](http://hakim.se).\
  This slide demo in Madoko is an adaption of his online demo.
* [Pdf][slide-pdf]:
  Uses the `Beamer` package for LaTeX
* [Source][slide-mdk]:
  Click to see the source of this presentation.


[madoko]: http://madoko.codeplex.com

## Reveal.js

`reveal.js` is a framework for easily creating beautiful presentations using
HTML. You'll need a browser with support for CSS 3D transforms to see it in
its full glory. 

And any Madoko features just work. Here is some math:

~ Begin Framed { padding:1ex; margin-top:1ex }
A famous equation is $e = mc^2$, but this one is 
famous too:

~ Equation  {#eq-gaussian}
\int_{-\infty}^\infty e^{-a x^2} d x = \sqrt{\frac{\pi}{a}} 
~
~ End Framed

~~ Notes
Oh hey, these are some notes. They'll be hidden in your presentation, but you
can see them if you open the speaker notes window (hit 's' on your keyboard).
~~

## Code

Here is code, highlighted by Madoko 

``` javascript
function sqr( x ) {
  var \(&pi;\) = 3.141593;
  return x*x;  /* the square */
}
```
We used `\(` and `\)` to escape into markdown to write &pi;.

<!-- Example of nested vertical slides -->
~ Begin Vertical { data-background:Gainsboro }

## Vertical Slides {#vertical}
Slides can be nested inside of other slides,
try pressing [down].

[![arrowdown]][down]


[down]: # { .navigate-down }
[arrowdown]: images/arrow.png "Down arrow" { width:178px; height:238px }

## Basement Level 1
Press down or up to navigate.

## Basement Level 2

Use `columns` to put blocks next to each other:

~ Begin Columns
~ Column { width:50% }
A monarch butterfly (shown to the right)
spends the winter in Mexico.
~
~ Column
![butterfly]
~
~ End Columns

[butterfly]: images/butterfly.png "A Monarch butterfly" { width:280px; vertical-align:middle }


<!-- 
For local background images, we need to have a reference to the image
such that it's data gets embedded into the HTML page. We define
it using "display=none" so it is hidden in the presentation. 
We can then refer to the image in "data-background-image". 
-->

![bfly]
[bfly]: images/butterfly.png "Butterfly" { display:none }

## Basement Level 3 { data-background-image:images/butterfly.png }
That's it, time to go back up.

[![arrowup]][back2]

[arrowup]:  images/arrow.png "Up arrow" { width:178px; height:238px; transform:rotate(180deg) }
[back2]:    #vertical { .image }

~ End Vertical


## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)



## Pauses?

Some pauses.

* {.fragment} One
* {.fragment} Two
* {.fragment} Three

And more:

- Test 1
- Test 2
- Test 3
{.fragmented}

Cool!.

~ Slide
A slide with no header
~


## Point of View

In Reveal.js Press **ESC** to enter the slide overview.

Hold down alt and click on any element to zoom in on it using 
 [zoom.js]. Alt + click anywhere to zoom back out.


[zoom.js]: http://lab.hakim.se/zoom-js


## Works in Mobile Safari

Try it out! You can swipe through the slides and pinch your way to the
overview.


## Printing

You can print a `revealjs` presentation nicely from the browser.

First give the `?print-pdf` or `?print-paper` query on your final
presentation (in the browser address bar) and then print from the Chrome
browser selecting `Save to PDF`.

Read more about it at the [revealjs documentation](https://github.com/hakimel/reveal.js#pdf-export)

## RevealJS library

Normally, the `revealjs` library is loaded from a CDN but you can specify your
own url using metadata:

    Reveal Url: <my url>

This can be useful when using a [server to run revealjs](https://github.com/hakimel/reveal.js#full-setup)
where you may use something like:

    @nopreview Reveal Url: http://localhost:8000/reveal.js


## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
