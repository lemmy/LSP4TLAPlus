[INCLUDE=presentation]
Title         : LSP
Sub Title     : ...or maybe not
Author        : Leo, Madan, Markus
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]

# Content

[TOC]

# Hack an LSP4TLA+?

* Discussed the features of Lean and TLA+ and how users of those languages interact with the tools
  * The feature set of LSP such as code completion, showing parsing errors, syntax highlighting, ...
  * Program execution not the scope of LSP => [DAP](https://microsoft.github.io/debug-adapter-protocol/overview) 

## Architecture

Considered implementing an LSP client for VSCode

* Existing TLA+ Toolbox acts as the LSP (back-end) server
  * Java/Eclipse there exists [lsp4j](https://github.com/eclipse/lsp4j)
    (abstracts from JSON parsing)

~ Center
![IMG_20190722_150554~2]
~
[IMG_20190722_150554~2]: images/IMG_20190722_150554-2.jpg "IMG_20190722_150554~2" { width:auto; max-width:90% }



* Toolbox provides functionality to tap into the compute resources provided by e.g. Azure
  * Run model checking remotely on fat machines
  * Run Model Checking in parallel on multiple machines => More exhaustively explore design space

# Rise4fun successor a.k.a. *Formal Methods as a Service*

Peli mentioned that LSP could become the successor to Rise4fun. VSCode is moving into the web (it is already in the browser)

## Goals

* Make RiSE tools more successfully by providing a web-based environment that does not only
  support toying with a RiSE language but is a first-class IDE and experiment environment for
  languages and tools

* Convenience/easy-of-us is extremely important to win users
  * => if a user cannot start your tool, she won't be able to use it

## Target audience 

* Teaching environments such as a university course on distributed systems

* "Enterprise" users (internal (dog food) and external to Microsoft)
  * Explore design space as fast as possible (massive compute)

### Use cases

* Education: 
  * No time or expertise to setup a tools on student computers
  * Insufficient resources to check the results of all students as part of grading
  * Hello MakeCode?!

* Enterprise
  * Explore design space faster by running tools, i.e. model checker in parallel
  * Time-dimension of prover or model checking runs
    * How do 
  * Continuous integration for model checking, theorem proving, rest of software project


## Requirements

### Convenience

### Compute

## Headcount

* An Azure service requires at least one FTE
  * => Prototype with a 3 months RiSE intern
  * => Tap into Gavin's resources
  * => Seek help from Azure experts to navigate the Azure feature space


# Madoko Presentation

Using [Madoko] it is easy to create beautiful presentations.

* [Html][slide]:
  Uses the `Reveal.js` library by [Hakim El Hattab](http://hakim.se).\
  This slide demo in Madoko is an adaption of his online demo.
* [Pdf][slide-pdf]:
  Uses the `Beamer` package for LaTeX
* [Source][slide-mdk]:
  Click to see the source of this presentation.


[madoko]: http://madoko.codeplex.com

## Reveal.js

`reveal.js` is a framework for easily creating beautiful presentations using
HTML. You'll need a browser with support for CSS 3D transforms to see it in
its full glory. 

And any Madoko features just work. Here is some math:

~ Begin Framed { padding:1ex; margin-top:1ex }
A famous equation is $e = mc^2$, but this one is 
famous too:

~ Equation  {#eq-gaussian}
\int_{-\infty}^\infty e^{-a x^2} d x = \sqrt{\frac{\pi}{a}} 
~
~ End Framed

~~ Notes
Oh hey, these are some notes. They'll be hidden in your presentation, but you
can see them if you open the speaker notes window (hit 's' on your keyboard).
~~

## Code

Here is code, highlighted by Madoko 

``` javascript
function sqr( x ) {
  var \(&pi;\) = 3.141593;
  return x*x;  /* the square */
}
```
We used `\(` and `\)` to escape into markdown to write &pi;.

<!-- Example of nested vertical slides -->
~ Begin Vertical { data-background:Gainsboro }

## Vertical Slides {#vertical}
Slides can be nested inside of other slides,
try pressing [down].

[![arrowdown]][down]


[down]: # { .navigate-down }
[arrowdown]: images/arrow.png "Down arrow" { width:178px; height:238px }

## Basement Level 1
Press down or up to navigate.

## Basement Level 2

Use `columns` to put blocks next to each other:

~ Begin Columns
~ Column { width:50% }
A monarch butterfly (shown to the right)
spends the winter in Mexico.
~
~ Column
![butterfly]
~
~ End Columns

[butterfly]: images/butterfly.png "A Monarch butterfly" { width:280px; vertical-align:middle }


<!-- 
For local background images, we need to have a reference to the image
such that it's data gets embedded into the HTML page. We define
it using "display=none" so it is hidden in the presentation. 
We can then refer to the image in "data-background-image". 
-->

![bfly]
[bfly]: images/butterfly.png "Butterfly" { display:none }

## Basement Level 3 { data-background-image:images/butterfly.png }
That's it, time to go back up.

[![arrowup]][back2]

[arrowup]:  images/arrow.png "Up arrow" { width:178px; height:238px; transform:rotate(180deg) }
[back2]:    #vertical { .image }

~ End Vertical


## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)



## Pauses?

Some pauses.

* {.fragment} One
* {.fragment} Two
* {.fragment} Three

And more:

- Test 1
- Test 2
- Test 3
{.fragmented}

Cool!.

~ Slide
A slide with no header
~


## Point of View

In Reveal.js Press **ESC** to enter the slide overview.

Hold down alt and click on any element to zoom in on it using 
 [zoom.js]. Alt + click anywhere to zoom back out.


[zoom.js]: http://lab.hakim.se/zoom-js


## Works in Mobile Safari

Try it out! You can swipe through the slides and pinch your way to the
overview.


## Printing

You can print a `revealjs` presentation nicely from the browser.

First give the `?print-pdf` or `?print-paper` query on your final
presentation (in the browser address bar) and then print from the Chrome
browser selecting `Save to PDF`.

Read more about it at the [revealjs documentation](https://github.com/hakimel/reveal.js#pdf-export)

## RevealJS library

Normally, the `revealjs` library is loaded from a CDN but you can specify your
own url using metadata:

    Reveal Url: <my url>

This can be useful when using a [server to run revealjs](https://github.com/hakimel/reveal.js#full-setup)
where you may use something like:

    @nopreview Reveal Url: http://localhost:8000/reveal.js


## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
